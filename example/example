#!/usr/bin/env bash
set -e

NETWORK=example
PROXY_BRANCH=mrc-3897

HERE=$(realpath $(dirname $0))

if [[ ! -d $HERE/config/demo ]]; then
    mkdir -p $HERE/config
    git clone https://github.com/mrc-ide/wodin-demo-config $HERE/config/demo
fi

docker pull mrcide/wodin:main
docker pull mrcide/wodin-proxy:$PROXY_BRANCH
docker pull mrcide/odin.api:main

function cleanup() {
  set +e
  docker kill wodin-proxy
  docker kill wodin-demo
  docker kill wodin-api
  docker kill wodin-redis
  docker rm wodin-proxy wodin-demo wodin-api wodin-redis
}
trap cleanup EXIT

docker rm --force wodin-redis wodin-api wodin-demo wodin-proxy 2> /dev/null || \
    /bin/true
docker network create $NETWORK 2> /dev/null || /bin/true

# Shared:
docker run -d --name wodin-redis --network=$NETWORK redis:6
docker run -d --name wodin-api --network=$NETWORK mrcide/odin.api:main

# We need something more sophisticated here, but we require that redis
# is fully up and accepting connections before we try to start wodin,
# or it will just fail to come up at all.
echo "Waiting for redis to become available..."
sleep 1

docker run -d --name wodin-demo --network=$NETWORK \
       -v $HERE/config/demo:/wodin/config:ro \
       mrcide/wodin:main \
       --redis-url=redis://wodin-redis:6379 \
       --odin-api=http://wodin-api:8001 \
       --base-url=http://localhost/demo \
       /wodin/config

# We need something more sophisticated here too, or the proxy does not
# come up.
echo "Waiting for wodin to become available..."
sleep 1

# -it --rm
docker run -d --network $NETWORK --name wodin-proxy \
       -p 80:80 \
       -v $HERE/root:/wodin/root:ro \
       mrcide/wodin-proxy:$PROXY_BRANCH localhost \
       --site demo=wodin-demo:3000

# Wait for Ctrl+C
echo "Wodin example running at http://localhost"
echo "Ctrl-C to stop and tear down containers"
sleep infinity
